View(games)
source('~/Desktop/Info 201/ch9-data-frames/exercise-1/exercise.R')
View(games)
view(games)
# View your data frame to see how it has changed!
View(games)
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
rownames(games) <- c(1,2,3,4)
View(games)
remove()
?runif
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries_2018 <- salaries_2017 + runif(100,-5000,10000)
source('~/Desktop/Info 201/ch9-data-frames/exercise-2/exercise.R')
source('~/Desktop/Info 201/ch9-data-frames/exercise-2/exercise.R')
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees,salaries_2017,salaries_2018)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- salaries_2018- salaries_2017
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- salaries_2018- salaries_2017
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change >0
# What was the 2018 salary of employee 57
salaries$salaries_2018["employee 59"]
# What was the 2018 salary of employee 57
salaries$salaries_2018['employee 57']
# What was the 2018 salary of employee 57
salaries$salaries_2018[["employee 57"]]
salaries$salaries_2018
View(salaries)
# What was the 2018 salary of employee 57
salaries$salaries_2018[[57]]
# What was the 2018 salary of employee 57
salaries$salaries_2018[57]
# What was the 2018 salary of employee 57
salaries$salaries_2018[[57]]
salary_57 <- salaries[salaries$employees == "Employee 57", "salaries_2018"]
salary_57
# How many employees got a raise?
nrow(salaries$got_raise == TRUE)
nrow(salaries)
nrow(salaries[salaries$got_raise == TRUE])
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE,])
# How many employees got a raise?
nrow(salaries[,salaries$got_raise == TRUE])
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE,])
salaries[2,]
nrow(salaries[,salaries$got_raise == TRUE])
nrow(salaries[salaries$got_raise])
nrow(salaries[salaries$got_raise == FALSE])
salaries[salaries$got_raise == TRUE,]
# What was the dollar value of the highest raise?
max(salaries$change)
# What was the "name" of the employee who received the highest raise?
salaries$employees[max(salaries$change)]
# What was the dollar value of the highest raise?
highest_raise <- max(salaries$change)
paste(make_introduction(name, age), "In", as.Date(next_birthday) - today, "days I'll be", new_age)
source('~/Desktop/Info 201/a2-core-skills-WantongChai/assignment.R')
make_birthday_intro("Watong",22,"2019-01-28")
# What was the "name" of the employee who received the highest raise?
salaries$employees[highest_raise]
# What was the dollar value of the highest raise?
highest_raise <- max(salaries$change)
highest_raise
# What was the "name" of the employee who received the highest raise?
salaries$employees[got_raise == highest_raise]
# What was the "name" of the employee who received the highest raise?
salaries$employees[salaries$got_raise == highest_raise]
# What was the "name" of the employee who received the highest raise?
salaries$employees[salaries$got_raise == highest_raise]
source('~/Desktop/Info 201/ch9-data-frames/exercise-2/exercise.R')
# What was the "name" of the employee who received the highest raise?
salaries$employees[salaries$got_raise == highest_raise]
# What was the "name" of the employee who received the highest raise?
salaries$employees[salaries$got_raise == highest_raise]
salaries$employees
salaries$employees[57]
salaries$salaries_2018[57]
salaries[salaries$employees == "Employee 57", "salaries_2018"]
# What was the "name" of the employee who received the highest raise?
salaries$employees[salaries$got_raise == highest_raise]
# What was the "name" of the employee who received the highest raise?
#salaries$employees[salaries$got_raise == highest_raise]
salaires[salaries$change == highest_raise, "employees"]
# What was the "name" of the employee who received the highest raise?
#salaries$employees[salaries$got_raise == highest_raise]
salaries[salaries$change == highest_raise, "employees"]
salaries[employees]
salaries["employees",salaries$change == highest_raise]
salaries[salaries$change == highest_raise,]
# What was the largest decrease in salaries between the two years?
largest_decrease <- min(salaries$change)
largest_decrease
# What was the largest decrease in salaries between the two years?
largest_decrease <- min(salaries$change)
# What was the name of the employee who recieved largest decrease in salary?
got_largest_decrease <- salaries[salaries$change == largest_decrease,'employees']
got_largest_decrease
# What was the name of the employee who recieved largest decrease in salary?
got_largest_decrease <- salaries[salaries$change == largest_decrease,"employees"]
got_largest_decrease
# What was the average salary change?
average <- mean(salaries[['change']])
average
# What was the average salary change?
average_change <- mean(salaries[['change']])
salaries[salaries$change == highest_raise, "employees"]
salaries$change[salaries$got_raise == FALSE]
salaries$employees[salaries$change == highest_raise]
salaries$employees
salaries$change[salaries$got_raise == FALSE]
salaries[salaries$got_raise == FALSE, "change"]
# For people who did not get a raise, how much money did they lose on average?
#salaries[salaries$got_raise == FALSE, "change"] #this is equivalent
mean(salaries$change[salaries$got_raise == FALSE])
# For people who did not get a raise, how much money did they lose on average?
#salaries[salaries$got_raise == FALSE, "change"] #this is equivalent
average_decrease <- mean(salaries$change[salaries$got_raise == FALSE])
?write.csv
?paste0
?write.csv
# Write a .csv file of your salary data to your working directory
write.csv(salaries,"salaries.csv")
source('~/Desktop/Info 201/ch9-data-frames/exercise-2/exercise.R')
write.csv(salaries,"salaries.csv")
# Write a .csv file of your salary data to your working directory
write.csv(salaries,'salaries.csv')
setwd("~/Desktop/Info 201/ch9-data-frames/exercise-2")
source('~/Desktop/Info 201/ch9-data-frames/exercise-2/exercise.R')
styler:::style_active_file()
source('~/Desktop/Info 201/ch9-data-frames/exercise-2/exercise.R')
# Create a factor variable
x <- factor(c('Jane', 'Ella', 'Mario'))
print(x)
str(x)
source('~/Desktop/Info 201/ch9-data-frames/exercise-4/exercise.R')
source('~/Desktop/Info 201/ch9-data-frames/exercise-4/exercise.R')
source('~/Desktop/Info 201/ch9-data-frames/exercise-4/exercise.R')
source('~/Desktop/Info 201/ch9-data-frames/exercise-4/exercise.R')
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv",stringsAsFactors = FALSE)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv",stringsAsFactors = FALSE)
setwd("~/Desktop/Info 201/ch9-data-frames/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv",stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
mean_value <- mean(grants$total_amount)
# What was the dollar amount of the largest grant?
largest_grant <- max(grants$total_amount)
# What was the dollar amount of the smallest grant?
smallest_grant <- min(grants$total_amount)
# Which organization received the largest grant?
largest_organization <- 'organization[grants$total_amount' == largest_grant]
salaries$change[salaries$got_raise == FALSE]
source('~/Desktop/Info 201/ch9-data-frames/exercise-2/exercise.R')
salaries$change[salaries$got_raise == FALSE]
salaries[salaries$got_raise == FALSE, "change"]
grants$total_amount == largest_grant
# Which organization received the largest grant?
largest_organization <- organization[grants$total_amount == largest_grant]
largest_organization
smallest_grant
# Which organization received the smallest grant?
smallest_organization <- organization[grants$total_amount == smallest_grant]
smallest_organization
length(grants$total_amount[grants$start_year == 2010])
length(organization[grants$start_year == 2010])
source('~/Desktop/Info 201/ch9-data-frames/exercise-4/exercise.R')
> length(organization[grants$start_year == 2010])
length(organization[grants$start_year == 2010])
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
source('~/Desktop/Info 201/ch9-data-frames/exercise-4/exercise.R')
salaries[salaries$change == highest_raise,]
highest_raise
# Create a vector of the opponent names corresponding to the games played
opponents <- c("Dolphins", "Rams", "49ers", "Jets")
# Create a vector of the opponent names corresponding to the games played
opponents <- c("Dolphins", "Rams", "49ers", "Jets")
# Create a vector of the opponent names corresponding to the games played
opponents <- c("Dolphins", "Rams", "49ers", "Jets")
# Create a vector of the opponent names corresponding to the games played
opponents <- c("Dolphins", "Rams", "49ers", "Jets")
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
points <- c(12, 3, 37, 27)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
points_allowed <- c(10, 9, 18, 17)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(points, points_allowed)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- points - points_allowed
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
# Create a vector of the opponent names corresponding to the games played
opponents <- c("Dolphins", "Rams", "49ers", "Jets")
View
View(games)
rownames(games)
colnames(games)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <-vehicles$make
unique(makes)
unique
?unique
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(makes))
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- vehicles[vehicles$year==1997,]
cars_1997
cars_1997 <- cars_1997[order(cars_1997$hwy), ]
cars_1997
order
?order
cars_1997 <- cars_1997[,order(cars_1997$hwy)]
cars_1997 <- cars_1997[order(cars_1997$hwy),]
vehicles <- cars_1997[order(cars_1997$hwy),]
vehicles
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles$averate <- mean(vehicles$cty+vehicles$hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997$averate <- mean(vehicles$cty+vehicles$hwy)
cars_1997
View(cars_1997)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997$average = (cars_1997$hwy + cars_1997$cty) / 2
cars_1997$average
cars_1997$averate1 <- mean(vehicles$cty+vehicles$hwy)
cars_1997$averate1
?mean
unique(cars_1997$year)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997$averate <- mean(cars_1997$cty+cars_1997$hwy)
cars_1997$average
View(cars_1997)
cars_1997$average11 = (cars_1997$hwy + cars_1997$cty) / 2
View(cars_1997)
View(cars_1997)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_20_mpg <- vehicles[vehicles$drive == '2-Wheel Drive' & vehicles$cty > 20, ]
View(two_wheel_20_mpg)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- two_wheel_20_mpg[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg$hwy,'id')]
two_wheel_20_mpg$id[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg$hwy)]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- two_wheel_20_mpg[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg$hwy,"id")]
select()
library(dplyr)
# Install and load the "dplyr" library
install.packages("dplyr")
library(dplyr)
library(dplyr)
View
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicle,make)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicle, make)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles, make)
makes
?nrow
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
nrow(distinct(makes))
makes
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
nrow(distinct(vehicles,make))
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- filter(vehicles, year == 1997)
unique(cars_1997)
unique(year)
distinct(cars_1997,year)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- two_wheel_20_mpg[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg$hwy,"id")]
source('~/Desktop/Info 201/ch10-dplyr/exercise-1/exercise.R')
source('~/Desktop/Info 201/ch10-dplyr/exercise-1/exercise.R')
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_20_mpg <- vehicles[vehicles$drive == '2-Wheel Drive' & vehicles$cty > 20, ]
two_wheel_20_mpg
View(two_wheel_20_mpg)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- two_wheel_20_mpg[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg$hwy,"id")]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- two_wheel_20_mpg[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg$hwy),"id"]
worst_hwy
source('~/Desktop/Info 201/ch10-dplyr/exercise-2/exercise.R')
# Arrange the 1997 cars by highway (`hwy`) gas milage
cars_1997 <- arrange(cars_1997,hwy)
View(cars_1997)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highcway mpg) for each car
mutate(cars_1997, average = (cty+hwy)/2)
View(cars_1997)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highcway mpg) for each car
mutate(cars_1997, average = (cty+hwy)/2)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highcway mpg) for each car
cars_1997 <- mutate(cars_1997, average=(cty+hwy)/2)
View(cars_1997)
# Install (if needed) and load the "dplyr" library
#install.packages("dplyr")
library("dplyr")
# Install (if needed) and load the "fueleconomy" package
#install.packages('devtools')
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
